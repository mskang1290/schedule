[{"C:\\git\\schedule\\src\\index.tsx":"1","C:\\git\\schedule\\src\\reportWebVitals.ts":"2","C:\\git\\schedule\\src\\App.tsx":"3","C:\\git\\schedule\\src\\Sample.tsx":"4","C:\\git\\schedule\\src\\Modal.tsx":"5"},{"size":500,"mtime":499162500000,"results":"6","hashOfConfig":"7"},{"size":426,"mtime":499162500000,"results":"8","hashOfConfig":"7"},{"size":942,"mtime":1606292487736,"results":"9","hashOfConfig":"7"},{"size":4737,"mtime":1606292173750,"results":"10","hashOfConfig":"7"},{"size":5786,"mtime":1606292173745,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1k7c35v",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"14"},"C:\\git\\schedule\\src\\index.tsx",[],["25","26"],"C:\\git\\schedule\\src\\reportWebVitals.ts",[],"C:\\git\\schedule\\src\\App.tsx",["27"],"C:\\git\\schedule\\src\\Sample.tsx",["28","29","30","31"],"import React, { useEffect, useState } from \"react\";\r\nimport { Calendar, momentLocalizer, Views } from \"react-big-calendar\";\r\nimport moment from \"moment\";\r\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\r\nimport { Event } from \"./Model\";\r\nimport \"./styles/modal.css\";\r\nimport Modal from \"./Modal\";\r\nimport \"./App.css\";\r\n\r\n// 何の機能か分からない\r\nconst localizer = momentLocalizer(moment);\r\n\r\nlet Atest: Views = {\r\n  MONTH: \"month\",\r\n  WEEK: \"week\",\r\n  WORK_WEEK: \"work_week\",\r\n  DAY: \"day\",\r\n  AGENDA: \"agenda\",\r\n};\r\n\r\nconst Sample = ({ eventList }: { eventList: Array<Event> }) => {\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [showEvent, setShowEvent] = useState(false);\r\n  const [event, setEvent] = useState({\r\n    id: undefined,\r\n    title: \"\",\r\n    start: undefined,\r\n    end: undefined,\r\n    allDay: false,\r\n    resource: \"\",\r\n  } as Event);\r\n  const test = () => {\r\n    return new Date();\r\n  };\r\n\r\n  useEffect(() => {\r\n    setEvent({});\r\n  }, [showEvent]);\r\n  return (\r\n    <>\r\n      <div className=\"App\">\r\n        <Calendar\r\n          localizer={localizer} //????\r\n          events={eventList} //event add\r\n          // timeslots={2}\r\n          // defaultView={Atest.MONTH}\r\n          onSelectEvent={(event: Event) => {\r\n            setEvent(event);\r\n            setShowEvent(true);\r\n          }}\r\n          style={{ height: 500 }} //calendarのstyle\r\n          // getNow={test}\r\n          // date={new Date(moment().add(1,\"day\").format())}\r\n          // resources={[{name:\"test1\"},{name:\"test2\"},{name:\"test3\"}]}\r\n          formats={{ monthHeaderFormat: \"YYYY-MM\" }}\r\n        />\r\n      </div>\r\n      {(showModal || showEvent) && (\r\n        <div className=\"modal\">\r\n          <Modal\r\n            setShowModal={setShowModal}\r\n            eventList={eventList}\r\n            showEvent={showEvent}\r\n            setShowEvent={setShowEvent}\r\n            event={event}\r\n            setEvent={setEvent}\r\n          />\r\n        </div>\r\n      )}\r\n      <button\r\n        className=\"button-default\"\r\n        onClick={() => {\r\n          setEvent({});\r\n          setShowModal(!showModal);\r\n        }}\r\n      >\r\n        addTime\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Sample;\r\n","C:\\git\\schedule\\src\\Modal.tsx",["32"],"import React, { useState } from \"react\";\r\nimport { Event } from \"./Model\";\r\nimport \"react-nice-dates/build/style.css\";\r\n\r\nimport \"./styles/modal.css\";\r\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport moment from \"moment\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    container: {\r\n      display: \"flex\",\r\n      flexWrap: \"wrap\",\r\n    },\r\n    textField: {\r\n      marginLeft: theme.spacing(1),\r\n      marginRight: theme.spacing(1),\r\n      width: 200,\r\n    },\r\n  })\r\n);\r\n\r\nconst Modal = ({\r\n  setShowModal,\r\n  eventList,\r\n  showEvent,\r\n  setShowEvent,\r\n  event,\r\n  setEvent,\r\n}: {\r\n  setShowModal: any;\r\n  eventList: Array<Event>;\r\n  showEvent: boolean;\r\n  setShowEvent: any;\r\n  event: Event;\r\n  setEvent: any;\r\n}) => {\r\n\r\n  console.log(eventList)\r\n  const [input, setInput] = useState({title:event.title || \"\", name:event.name || \"\"});\r\n  const [date, setDate] = useState({\r\n    start:\r\n      moment(event.start).format(\"YYYY-MM-DDTHH:mm\") ||\r\n      moment().format(\"YYYY-MM-DDTHH:mm\"),\r\n    end:\r\n      moment(event.end).format(\"YYYY-MM-DDTHH:mm\") ||\r\n      moment().format(\"YYYY-MM-DDTHH:mm\"),\r\n  });\r\n\r\n  const [allDay, setAllDay] = useState(showEvent ? event.allDay : false);\r\n  const test2 = (e: any) => {\r\n    const { name, value } = e.target;\r\n    setDate({ ...date, [name]: value });\r\n  };\r\n\r\n  const classes = useStyles();\r\n  const addEvent = () => {\r\n    let id=-1;\r\n    let idCheckFL=false;\r\n    eventList.forEach((event)=>{\r\n    if(!idCheckFL){\r\n        if(event.name===input.name&&(typeof event.id!==\"undefined\")){\r\n        id=event.id;\r\n        idCheckFL=true;\r\n      }else{\r\n        if(typeof event.id!==\"undefined\"&&id<event.id){\r\n          id=event.id\r\n        }\r\n      }\r\n    }\r\n    })\r\n\r\n    const event = ({\r\n      id: idCheckFL?id:id+1,\r\n      title: input.title,\r\n      start: new Date(date.start.replace(\"T\", \" \")),\r\n      end: new Date(date.end.replace(\"T\", \" \")),\r\n      allDay: allDay,\r\n      resource: \"test1234\",\r\n      name:input.name\r\n    } as unknown) as Event;\r\n    eventList.push(event);\r\n    setShowModal(false);\r\n    setShowEvent(false);\r\n    setEvent({})\r\n  };\r\n\r\n  const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setInput({...input, [event.target.name]:event.target.value});\r\n  };\r\n\r\n  const disabled = showEvent;\r\n  return (\r\n    <div>\r\n      <div className=\"overlay\" />\r\n      <div className=\"modal\">\r\n        <button\r\n          className=\"modal-close\"\r\n          type=\"button\"\r\n          onClick={() => {\r\n            setShowModal(false);\r\n            setShowEvent(false);\r\n            setEvent({})\r\n          }}\r\n        >\r\n          X\r\n        </button>\r\n        <div className=\"modal-body\">\r\n          <p>\r\n            <label>title : </label>\r\n            <input\r\n              name=\"title\"\r\n              onChange={onChange}\r\n              value={input.title}\r\n              disabled={disabled}\r\n            />\r\n            </p>\r\n            <p>\r\n            <label>name : </label>\r\n            <input\r\n              name=\"name\"\r\n              onChange={onChange}\r\n              value={input.name}\r\n              disabled={disabled}\r\n            />\r\n            <TextField\r\n              id=\"datetime-local\"\r\n              label=\"Next appointment\"\r\n              type=\"datetime-local\"\r\n              name=\"start\"\r\n              className={classes.textField}\r\n              InputLabelProps={{\r\n                shrink: true,\r\n              }}\r\n              onChange={test2}\r\n              value={date.start}\r\n              disabled={disabled}\r\n            />\r\n            <TextField\r\n              id=\"datetime-local\"\r\n              label=\"Next appointment\"\r\n              type=\"datetime-local\"\r\n              name=\"end\"\r\n              className={classes.textField}\r\n              InputLabelProps={{\r\n                shrink: true,\r\n              }}\r\n              onChange={test2}\r\n              value={date.end}\r\n              disabled={disabled}\r\n            />\r\n          </p>\r\n        </div>\r\n        {!disabled && (\r\n          <button type=\"button\" onClick={addEvent}>\r\n            test\r\n          </button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n",{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":29,"column":6,"nodeType":"39","endLine":29,"endColumn":8,"suggestions":"40"},{"ruleId":"41","severity":1,"message":"42","line":1,"column":17,"nodeType":"43","messageId":"44","endLine":1,"endColumn":26},{"ruleId":"41","severity":1,"message":"45","line":9,"column":8,"nodeType":"43","messageId":"44","endLine":9,"endColumn":13},{"ruleId":"41","severity":1,"message":"46","line":85,"column":10,"nodeType":"43","messageId":"44","endLine":85,"endColumn":14},{"ruleId":"41","severity":1,"message":"47","line":85,"column":16,"nodeType":"43","messageId":"44","endLine":85,"endColumn":23},{"ruleId":"41","severity":1,"message":"48","line":51,"column":18,"nodeType":"43","messageId":"44","endLine":51,"endColumn":27},"no-native-reassign",["49"],"no-negated-in-lhs",["50"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'eventList'. Either include it or remove the dependency array.","ArrayExpression",["51"],"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'axios' is defined but never used.","'data' is assigned a value but never used.","'setData' is assigned a value but never used.","'setAllDay' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"52","fix":"53"},"Update the dependencies array to be: [eventList]",{"range":"54","text":"55"},[780,782],"[eventList]"]